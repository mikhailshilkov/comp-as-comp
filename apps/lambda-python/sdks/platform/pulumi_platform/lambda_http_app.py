# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LambdaHttpAppArgs', 'LambdaHttpApp']

@pulumi.input_type
class LambdaHttpAppArgs:
    def __init__(__self__, *,
                 app_folder: pulumi.Input[str],
                 entry_point: pulumi.Input[str],
                 dynamo_table_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LambdaHttpApp resource.
        :param pulumi.Input[str] app_folder: The folder containing the Lambda function code.
        :param pulumi.Input[str] entry_point: The entry point for the Lambda function.
        :param pulumi.Input[str] dynamo_table_arn: The ARN of the DynamoDB table to grant access to.
        """
        pulumi.set(__self__, "app_folder", app_folder)
        pulumi.set(__self__, "entry_point", entry_point)
        if dynamo_table_arn is not None:
            pulumi.set(__self__, "dynamo_table_arn", dynamo_table_arn)

    @property
    @pulumi.getter(name="appFolder")
    def app_folder(self) -> pulumi.Input[str]:
        """
        The folder containing the Lambda function code.
        """
        return pulumi.get(self, "app_folder")

    @app_folder.setter
    def app_folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_folder", value)

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> pulumi.Input[str]:
        """
        The entry point for the Lambda function.
        """
        return pulumi.get(self, "entry_point")

    @entry_point.setter
    def entry_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry_point", value)

    @property
    @pulumi.getter(name="dynamoTableArn")
    def dynamo_table_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the DynamoDB table to grant access to.
        """
        return pulumi.get(self, "dynamo_table_arn")

    @dynamo_table_arn.setter
    def dynamo_table_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamo_table_arn", value)


class LambdaHttpApp(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_folder: Optional[pulumi.Input[str]] = None,
                 dynamo_table_arn: Optional[pulumi.Input[str]] = None,
                 entry_point: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource helps you create a Lambda function and API Gateway Rest API.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_folder: The folder containing the Lambda function code.
        :param pulumi.Input[str] dynamo_table_arn: The ARN of the DynamoDB table to grant access to.
        :param pulumi.Input[str] entry_point: The entry point for the Lambda function.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LambdaHttpAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource helps you create a Lambda function and API Gateway Rest API.

        :param str resource_name: The name of the resource.
        :param LambdaHttpAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LambdaHttpAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_folder: Optional[pulumi.Input[str]] = None,
                 dynamo_table_arn: Optional[pulumi.Input[str]] = None,
                 entry_point: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LambdaHttpAppArgs.__new__(LambdaHttpAppArgs)

            if app_folder is None and not opts.urn:
                raise TypeError("Missing required property 'app_folder'")
            __props__.__dict__["app_folder"] = app_folder
            __props__.__dict__["dynamo_table_arn"] = dynamo_table_arn
            if entry_point is None and not opts.urn:
                raise TypeError("Missing required property 'entry_point'")
            __props__.__dict__["entry_point"] = entry_point
            __props__.__dict__["endpoint"] = None
        super(LambdaHttpApp, __self__).__init__(
            'platform:index:LambdaHttpApp',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        The https endpoint of the running Rest API
        """
        return pulumi.get(self, "endpoint")

