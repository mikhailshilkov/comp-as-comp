# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['SelfSignedCertificateArgs', 'SelfSignedCertificate']

@pulumi.input_type
class SelfSignedCertificateArgs:
    def __init__(__self__, *,
                 local_validity_period_hours: pulumi.Input[float],
                 subject: pulumi.Input['Input_subject_SelfSignedCertSubjectArgs'],
                 validity_period_hours: pulumi.Input[float],
                 algorithm: Optional[pulumi.Input[str]] = None,
                 allowed_uses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 rsa_bits: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a SelfSignedCertificate resource.
        :param pulumi.Input[float] local_validity_period_hours: Number of hours, after initial issuing, that the local certificate will remain valid for.
        :param pulumi.Input['Input_subject_SelfSignedCertSubjectArgs'] subject: The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https:tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
        :param pulumi.Input[float] validity_period_hours: Number of hours, after initial issuing, that the certificate will remain valid for.
        :param pulumi.Input[str] algorithm: Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and `ED25519` (default: `RSA`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_uses: List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https:datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        :param pulumi.Input[str] dns_name: The DNS name for which a certificate is being requested (i.e. certificate subjects).
        :param pulumi.Input[str] ecdsa_curve: When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`, `P384` or `P521` (default: `P224`).
        :param pulumi.Input[str] ip_address: The IP address for which a certificate is being requested (i.e. certificate subjects).
        :param pulumi.Input[float] rsa_bits: When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
        """
        pulumi.set(__self__, "local_validity_period_hours", local_validity_period_hours)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "validity_period_hours", validity_period_hours)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if allowed_uses is not None:
            pulumi.set(__self__, "allowed_uses", allowed_uses)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if ecdsa_curve is not None:
            pulumi.set(__self__, "ecdsa_curve", ecdsa_curve)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if rsa_bits is not None:
            pulumi.set(__self__, "rsa_bits", rsa_bits)

    @property
    @pulumi.getter(name="localValidityPeriodHours")
    def local_validity_period_hours(self) -> pulumi.Input[float]:
        """
        Number of hours, after initial issuing, that the local certificate will remain valid for.
        """
        return pulumi.get(self, "local_validity_period_hours")

    @local_validity_period_hours.setter
    def local_validity_period_hours(self, value: pulumi.Input[float]):
        pulumi.set(self, "local_validity_period_hours", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input['Input_subject_SelfSignedCertSubjectArgs']:
        """
        The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https:tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input['Input_subject_SelfSignedCertSubjectArgs']):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="validityPeriodHours")
    def validity_period_hours(self) -> pulumi.Input[float]:
        """
        Number of hours, after initial issuing, that the certificate will remain valid for.
        """
        return pulumi.get(self, "validity_period_hours")

    @validity_period_hours.setter
    def validity_period_hours(self, value: pulumi.Input[float]):
        pulumi.set(self, "validity_period_hours", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and `ED25519` (default: `RSA`).
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https:datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        """
        return pulumi.get(self, "allowed_uses")

    @allowed_uses.setter
    def allowed_uses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_uses", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name for which a certificate is being requested (i.e. certificate subjects).
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="ecdsaCurve")
    def ecdsa_curve(self) -> Optional[pulumi.Input[str]]:
        """
        When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`, `P384` or `P521` (default: `P224`).
        """
        return pulumi.get(self, "ecdsa_curve")

    @ecdsa_curve.setter
    def ecdsa_curve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecdsa_curve", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address for which a certificate is being requested (i.e. certificate subjects).
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="rsaBits")
    def rsa_bits(self) -> Optional[pulumi.Input[float]]:
        """
        When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
        """
        return pulumi.get(self, "rsa_bits")

    @rsa_bits.setter
    def rsa_bits(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rsa_bits", value)


class SelfSignedCertificate(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 allowed_uses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 local_validity_period_hours: Optional[pulumi.Input[float]] = None,
                 rsa_bits: Optional[pulumi.Input[float]] = None,
                 subject: Optional[pulumi.Input[pulumi.InputType['Input_subject_SelfSignedCertSubjectArgs']]] = None,
                 validity_period_hours: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        This resources helps you create a self signed certificate.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and `ED25519` (default: `RSA`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_uses: List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https:datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https:datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        :param pulumi.Input[str] dns_name: The DNS name for which a certificate is being requested (i.e. certificate subjects).
        :param pulumi.Input[str] ecdsa_curve: When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`, `P384` or `P521` (default: `P224`).
        :param pulumi.Input[str] ip_address: The IP address for which a certificate is being requested (i.e. certificate subjects).
        :param pulumi.Input[float] local_validity_period_hours: Number of hours, after initial issuing, that the local certificate will remain valid for.
        :param pulumi.Input[float] rsa_bits: When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
        :param pulumi.Input[pulumi.InputType['Input_subject_SelfSignedCertSubjectArgs']] subject: The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https:tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
        :param pulumi.Input[float] validity_period_hours: Number of hours, after initial issuing, that the certificate will remain valid for.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SelfSignedCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resources helps you create a self signed certificate.

        :param str resource_name: The name of the resource.
        :param SelfSignedCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SelfSignedCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 allowed_uses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 local_validity_period_hours: Optional[pulumi.Input[float]] = None,
                 rsa_bits: Optional[pulumi.Input[float]] = None,
                 subject: Optional[pulumi.Input[pulumi.InputType['Input_subject_SelfSignedCertSubjectArgs']]] = None,
                 validity_period_hours: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SelfSignedCertificateArgs.__new__(SelfSignedCertificateArgs)

            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["allowed_uses"] = allowed_uses
            __props__.__dict__["dns_name"] = dns_name
            __props__.__dict__["ecdsa_curve"] = ecdsa_curve
            __props__.__dict__["ip_address"] = ip_address
            if local_validity_period_hours is None and not opts.urn:
                raise TypeError("Missing required property 'local_validity_period_hours'")
            __props__.__dict__["local_validity_period_hours"] = local_validity_period_hours
            __props__.__dict__["rsa_bits"] = rsa_bits
            if subject is None and not opts.urn:
                raise TypeError("Missing required property 'subject'")
            __props__.__dict__["subject"] = subject
            if validity_period_hours is None and not opts.urn:
                raise TypeError("Missing required property 'validity_period_hours'")
            __props__.__dict__["validity_period_hours"] = validity_period_hours
            __props__.__dict__["ca_cert"] = None
            __props__.__dict__["pem"] = None
            __props__.__dict__["private_key"] = None
        super(SelfSignedCertificate, __self__).__init__(
            'tls-self-signed-cert:index:SelfSignedCertificate',
            resource_name,
            __props__,
            opts,
            remote=True,
            package_ref=_utilities.get_package())

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[str]:
        """
        Your self signed cert.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter
    def pem(self) -> pulumi.Output[str]:
        """
        The PEM of your self signed cert.
        """
        return pulumi.get(self, "pem")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        The private key of your self signed cert.
        """
        return pulumi.get(self, "private_key")

